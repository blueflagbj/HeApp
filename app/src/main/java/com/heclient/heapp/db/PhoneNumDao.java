package com.heclient.heapp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PHONE_NUM".
*/
public class PhoneNumDao extends AbstractDao<PhoneNum, Long> {

    public static final String TABLENAME = "PHONE_NUM";

    /**
     * Properties of entity PhoneNum.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "Id", true, "_id");
        public final static Property Phoneid = new Property(1, int.class, "phoneid", false, "PHONEID");
        public final static Property Phonenum = new Property(2, String.class, "phonenum", false, "PHONENUM");
        public final static Property IsDone = new Property(3, int.class, "isDone", false, "IS_DONE");
        public final static Property DoDate = new Property(4, String.class, "doDate", false, "DO_DATE");
    }


    public PhoneNumDao(DaoConfig config) {
        super(config);
    }
    
    public PhoneNumDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PHONE_NUM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: Id
                "\"PHONEID\" INTEGER NOT NULL ," + // 1: phoneid
                "\"PHONENUM\" TEXT," + // 2: phonenum
                "\"IS_DONE\" INTEGER NOT NULL ," + // 3: isDone
                "\"DO_DATE\" TEXT);"); // 4: doDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PHONE_NUM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PhoneNum entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getPhoneid());
 
        String phonenum = entity.getPhonenum();
        if (phonenum != null) {
            stmt.bindString(3, phonenum);
        }
        stmt.bindLong(4, entity.getIsDone());
 
        String doDate = entity.getDoDate();
        if (doDate != null) {
            stmt.bindString(5, doDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PhoneNum entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getPhoneid());
 
        String phonenum = entity.getPhonenum();
        if (phonenum != null) {
            stmt.bindString(3, phonenum);
        }
        stmt.bindLong(4, entity.getIsDone());
 
        String doDate = entity.getDoDate();
        if (doDate != null) {
            stmt.bindString(5, doDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public PhoneNum readEntity(Cursor cursor, int offset) {
        PhoneNum entity = new PhoneNum( //
            cursor.getLong(offset + 0), // Id
            cursor.getInt(offset + 1), // phoneid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phonenum
            cursor.getInt(offset + 3), // isDone
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // doDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PhoneNum entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setPhoneid(cursor.getInt(offset + 1));
        entity.setPhonenum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsDone(cursor.getInt(offset + 3));
        entity.setDoDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PhoneNum entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PhoneNum entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PhoneNum entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
